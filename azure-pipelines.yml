trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  BUILD_CONFIGURATION: 'Release'
  PROJECT_OUT_PATH: '$(Build.ArtifactStagingDirectory)'
  SAMPLES_DIR: $(Build.SourcesDirectory)/samples
  MIGRATIO_DIRECTORY: $(Pipeline.Workspace)/Migratio

resources:
  containers:
    - container: postgresDbEnv1
      image: 'postgres'
      ports:
        - 127.0.0.1:5433:5432
      env:
        POSTGRES_USER: pguserenv1
        POSTGRES_PASSWORD: pgpassenv1
        POSTGRES_DB: EnvOneDb
    - container: postgresDbEnv2
      image: 'postgres'
      ports:
        - 127.0.0.1:5434:5432
      env:
        POSTGRES_USER: pguserenv2
        POSTGRES_PASSWORD: pgpassenv2
        POSTGRES_DB: EnvTwoDb

stages:
  - stage: buildAndUnitTest
    displayName: 'Build & Test'
    jobs:
      - job: 'Build'
        displayName: 'Build job'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'Restore project dependencies'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
          - task: DotNetCoreCLI@2
            displayName: 'Build the project - $(BUILD_CONFIGURATION)'
            inputs:
              command: 'build'
              arguments: '--no-restore --configuration $(BUILD_CONFIGURATION)'
              projects: '**/*.csproj'
          - task: DotNetCoreCLI@2
            displayName: 'Run Tests'
            inputs:
              command: 'test'
              projects: '**/*Tests/*UnitTests.csproj'
              arguments: '--configuration $(BUILD_CONFIGURATION)  --collect "Code coverage"'
  - stage: codeAnalysis
    dependsOn: buildAndUnitTest
    displayName: 'Code Analysis'
    jobs:
      - job: analyse
        displayName: 'Analyse'
        steps:
          - task: UseDotNet@2
            displayName: "Use .NET Core sdk"
            inputs:
              packageType: "sdk"
              version: "5.x"
          - task: DotNetCoreCLI@2
            displayName: 'Restore project dependencies'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
          - task: DotNetCoreCLI@2
            displayName: 'Build the project - $(BUILD_CONFIGURATION)'
            inputs:
              command: 'build'
              arguments: '--no-restore --configuration $(BUILD_CONFIGURATION)'
              projects: '**/*.csproj'
          - task: ReSharperToolInstaller@0
            displayName: 'Install ReSharper CLI'
            inputs:
              toolVersion: 'latest'
          - task: ReSharperInspectCode@0
            displayName: 'Run Code Inspection'
            inputs:
              solutionPath: $(Build.SourcesDirectory)/src/Migratio.sln
          - task: ReSharperPublishReport@0
            displayName: 'Publish ReSharper Report'
  - stage: publishArtifact
    displayName: 'Publish Artifact'
    dependsOn: codeAnalysis
    jobs:
      - job:
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'Publish Code - $(BUILD_CONFIGURATION)'
            inputs:
              command: 'publish'
              publishWebProjects: false
              projects: '$(Build.SourcesDirectory)/src/Migratio/Migratio.csproj'
              arguments: '--configuration $(BUILD_CONFIGURATION) --output $(PROJECT_OUT_PATH)'
              zipAfterPublish: false
              modifyOutputPath: false
          - task: PublishPipelineArtifact@1
            displayName: 'Publish artifact'
            inputs:
              artifact: 'Migratio'
              targetPath: $(PROJECT_OUT_PATH)
  - stage: runSamples
    displayName: 'Run samples'
    dependsOn: publishArtifact
    jobs:
      - job:
        services:
          postgresDbEnv1: postgresDbEnv1
          postgresDbEnv2: postgresDbEnv2
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Migratio'
            inputs:
              buildType: 'current'
              artifactName: 'Migratio'
              targetPath: '$(MIGRATIO_DIRECTORY)'
          - task: PowerShell@2
            displayName: 'Env1 - Verify'
            inputs:
              targetType: 'inline'
              script: |
                Import-Module ./Migratio.dll
                Invoke-MgRollout -CreateTableIfNotExist -ConfigFile $(SAMPLES_DIR)/migratio.yml -Env env1
                Invoke-MgSeeding -CreateTableIfNotExist -ConfigFile $(SAMPLES_DIR)/migratio.yml -Env env1
                Invoke-MgRollback -ConfigFile $(SAMPLES_DIR)/migratio.yml -Env env1
              failOnStderr: true
              workingDirectory: '$(MIGRATIO_DIRECTORY)'
            env:
              MG_DB_PASSWORD: pgpassenv1
          - task: PowerShell@2
            displayName: 'Env2 - Verify'
            inputs:
              targetType: 'inline'
              script: |
                Import-Module ./Migratio.dll
                Invoke-MgRollout -CreateTableIfNotExist -ConfigFile $(SAMPLES_DIR)/migratio.yml -Env env2
                Invoke-MgSeeding -CreateTableIfNotExist -ConfigFile $(SAMPLES_DIR)/migratio.yml -Env env2
                Invoke-MgRollback -ConfigFile $(SAMPLES_DIR)/migratio.yml -Env env2
              failOnStderr: true
              workingDirectory: '$(MIGRATIO_DIRECTORY)'
            env:
              MG_DB_PASSWORD: pgpassenv2
